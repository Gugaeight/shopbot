import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ContentType, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio

# CONFIGURATION
BOT_TOKEN = "8164341939:AAH4BXM2uv0BZJ4fVmzxq87-0OJbjBqw6E8"
ADMIN_IDS = [5183767407]  # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –≤–∞—à–∏—Ö –∞–¥–º–∏–Ω–æ–≤

# DATABASE SETUP
conn = sqlite3.connect("shop.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    price INTEGER,
    description TEXT
)
""")
conn.commit()

cursor.execute("""
CREATE TABLE IF NOT EXISTS purchases (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    username TEXT,
    certificate TEXT,
    price INTEGER,
    purchase_date TEXT
)
""")
conn.commit()

# INITIALIZATION
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# STATES
class PurchaseState(StatesGroup):
    waiting_for_certificate = State()
    waiting_for_payment_proof = State()
    waiting_for_payment = State()
    payment_verified = State()

class AdminState(StatesGroup):
    editing_price = State()
    editing_description = State()
    adding_product_name = State()
    adding_product_price = State()
    adding_product_description = State()

# KEYBOARDS
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéÅ –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")],
        [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton(text="üìù –û—Ç–∑—ã–≤—ã")],
        [KeyboardButton(text="‚öô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    ], resize_keyboard=True
)

certificate_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û–±—ã—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 600 —Ä—É–±–ª–µ–π")],
        [KeyboardButton(text="–ü–∞—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 800 —Ä—É–±–ª–µ–π")],
        [KeyboardButton(text="–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 1300 —Ä—É–±–ª–µ–π")],
        [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True
)

pay_button = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨")],
        [KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True
)

admin_panel_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã")],
        [KeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="üì§ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
        [KeyboardButton(text="üë• –í—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")],
        [KeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True
)

# HANDLERS

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
@dp.message(lambda message: message.text == "üéÅ –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def choose_certificate(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:", reply_markup=certificate_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
@dp.message(lambda message: message.text == "–û–±—ã—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 600 —Ä—É–±–ª–µ–π")
async def normal_certificate(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û–±—ã—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ 600 —Ä—É–±–ª–µ–π. –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üí≥ –û–ü–õ–ê–¢–ò–¢–¨'.", reply_markup=pay_button)

@dp.message(lambda message: message.text == "–ü–∞—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 800 —Ä—É–±–ª–µ–π")
async def pair_certificate(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–∞—Ä–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ 800 —Ä—É–±–ª–µ–π. –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üí≥ –û–ü–õ–ê–¢–ò–¢–¨'.", reply_markup=pay_button)

@dp.message(lambda message: message.text == "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç - 1300 —Ä—É–±–ª–µ–π")
async def instant_certificate(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞ 1300 —Ä—É–±–ª–µ–π. –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ 'üí≥ –û–ü–õ–ê–¢–ò–¢–¨'.", reply_markup=pay_button)

@dp.message(lambda message: message.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel(message: types.Message):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message(lambda message: message.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("–î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É: support@example.com.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∑—ã–≤—ã"
@dp.message(lambda message: message.text == "üìù –û—Ç–∑—ã–≤—ã")
async def reviews(message: types.Message):
    await message.answer("–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: www.example.com/reviews")

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message(lambda message: message.text == "‚öô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and message.from_user.id in ADMIN_IDS)
async def admin_panel(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_panel_menu
    )

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã
@dp.message(lambda message: message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—ã" and message.from_user.id in ADMIN_IDS)
async def edit_prices(message: types.Message):
    cursor.execute("SELECT name FROM products")
    products = cursor.fetchall()
    product_names = [product[0] for product in products]

    if not product_names:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=product_name)] for product_name in product_names] + [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))

    await AdminState.editing_price.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
@dp.message(State(AdminState.editing_price))
async def choose_product_for_price_edit(message: types.Message, state: FSMContext):
    product_name = message.text.strip()

    cursor.execute("SELECT id, price FROM products WHERE name = ?", (product_name,))
    product = cursor.fetchone()

    if not product:
        await message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(product_id=product[0], old_price=product[1])

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product_name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await AdminState.editing_price.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
@dp.message(State(AdminState.editing_price))
async def update_price(message: types.Message, state: FSMContext):
    try:
        new_price = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return

    data = await state.get_data()
    product_id = data["product_id"]

    cursor.execute("UPDATE products SET price = ? WHERE id = ?", (new_price, product_id))
    conn.commit()

    await message.answer(f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±–ª–µ–π.")
    await admin_panel(message)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
@dp.message(lambda message: message.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ" and message.from_user.id in ADMIN_IDS)
async def edit_description(message: types.Message):
    cursor.execute("SELECT name FROM products")
    products = cursor.fetchall()
    product_names = [product[0] for product in products]

    if not product_names:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:", reply_markup=ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=product_name)] for product_name in product_names] + [[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    ))

    await AdminState.editing_description.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(State(AdminState.editing_description))
async def choose_product_for_description_edit(message: types.Message, state: FSMContext):
    product_name = message.text.strip()

    cursor.execute("SELECT id, description FROM products WHERE name = ?", (product_name,))
    product = cursor.fetchone()

    if not product:
        await message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(product_id=product[0], old_description=product[1])

    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: {product_name}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await AdminState.editing_description.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(State(AdminState.editing_description))
async def update_description(message: types.Message, state: FSMContext):
    new_description = message.text.strip()

    data = await state.get_data()
    product_id = data["product_id"]

    cursor.execute("UPDATE products SET description = ? WHERE id = ?", (new_description, product_id))
    conn.commit()

    await message.answer(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await admin_panel(message)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä" and message.from_user.id in ADMIN_IDS)
async def add_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AdminState.adding_product_name.set()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@dp.message(State(AdminState.adding_product_name))
async def add_product_name(message: types.Message, state: FSMContext):
    product_name = message.text.strip()
    await state.update_data(product_name=product_name)

    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}':")
    await AdminState.adding_product_price.set()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã
@dp.message(State(AdminState.adding_product_price))
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return

    data = await state.get_data()
    product_name = data["product_name"]

    await state.update_data(price=price)

    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}':")
    await AdminState.adding_product_description.set()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message(State(AdminState.adding_product_description))
async def add_product_description(message: types.Message, state: FSMContext):
    description = message.text.strip()

    data = await state.get_data()
    product_name = data["product_name"]
    price = data["price"]

    cursor.execute("INSERT INTO products (name, price, description) VALUES (?, ?, ?)", 
                   (product_name, price, description))
    conn.commit()

    await message.answer(f"–¢–æ–≤–∞—Ä '{product_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    await admin_panel(message)

# Run bot
if __name__ == "__main__":
    asyncio.run(dp.start_polling())
